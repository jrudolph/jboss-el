/* Generated By:JJTree: Do not edit this line. AstBracketSuffix.java */

package org.jboss.el.parser;

import javax.el.ELException;
import javax.el.ELResolver;
import javax.el.MethodInfo;
import javax.el.PropertyNotFoundException;

import org.jboss.el.lang.EvaluationContext;
import org.jboss.el.util.MessageFactory;
import org.jboss.el.util.ReflectionUtil;


/**
 * @author Jacob Hookom [jacob@hookom.net]
 * @version $Change: 181177 $$DateTime: 2001/06/26 08:45:09 $$Author: markt $
 */
public final class AstBracketSuffix extends ValueSuffixNode {
    public AstBracketSuffix(int id) {
        super(id);
    }

    public Object getValue(EvaluationContext ctx)
            throws ELException {
        return this.children[0].getValue(ctx);
    }

	public MethodInfo getMethodInfo(Object base, EvaluationContext ctx, Class[] paramTypes) throws ELException {
		return ReflectionUtil.getMethodInfo(base, this.getValue(ctx), paramTypes);
	}

	public Class getType(Object base, EvaluationContext ctx) throws ELException {
		ELResolver resolver = ctx.getELResolver();
		ctx.setPropertyResolved(false);
		return resolver.getType(ctx, base, this.getValue(ctx));
	}
	
	public Object getTarget(Object base, EvaluationContext ctx) throws ELException {
		if (base == null) return null;
		
		ELResolver resolver = ctx.getELResolver();
		ctx.setPropertyResolved(false);
		Object p = this.getValue(ctx);
		Object r = resolver.getValue(ctx, base, p);
		if (r == null) {
			throw new PropertyNotFoundException(MessageFactory.get(
					"error.unreachable.property", base.getClass().getName(),
					p));
		}
		return r;
	}

	public Object getValue(Object base, EvaluationContext ctx) throws ELException {
		if (base == null) return null;
		
		ELResolver resolver = ctx.getELResolver();
		ctx.setPropertyResolved(false);
		return resolver.getValue(ctx, base, this.getValue(ctx));
	}

	public Object invoke(Object base, EvaluationContext ctx, Class[] paramTypes, Object[] paramValues) throws ELException {
		return ReflectionUtil.invokeMethod(base, this.getValue(ctx), paramTypes, paramValues);
	}

	public boolean isReadOnly(Object base, EvaluationContext ctx) throws ELException {
		ELResolver resolver = ctx.getELResolver();
		ctx.setPropertyResolved(false);
		return resolver.isReadOnly(ctx, base, this.getValue(ctx));
	}

	public void setValue(Object base, EvaluationContext ctx, Object value) throws ELException {
		ELResolver resolver = ctx.getELResolver();
		ctx.setPropertyResolved(false);
		resolver.setValue(ctx, base, this.getValue(ctx), value);
	}
}
